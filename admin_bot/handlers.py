# admin_bot/handlers.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiohttp
import logging
from aiogram import Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from config import settings
from utils import validate_telegram_token, register_token_to_backend
from aiogram.types import CallbackQuery
from sqlalchemy.orm import sessionmaker
from app.database import engine
from app import models
from app.database import SessionLocal
from app.models import ChatRoom, Bot

logging.basicConfig(level=logging.INFO)
SessionLocal = sessionmaker(bind=engine)


class NewBotStates(StatesGroup):
    waiting_token = State()
    waiting_mode = State()
    waiting_chat_details = State()
    waiting_invite_details = State()

class AuthStates(StatesGroup):
    waiting_password = State()

async def cmd_auth(message: Message, state: FSMContext):
    await state.set_state(AuthStates.waiting_password)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")

async def handle_password(message: Message, state: FSMContext):
    password = message.text.strip()
    if password != settings.ADMIN_PASSWORD:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å.")
        return

    db = SessionLocal()
    try:
        admin = db.query(models.AdminUser).filter_by(tg_user_id=message.from_user.id).first()
        if not admin:
            admin = models.AdminUser(tg_user_id=message.from_user.id)
            db.add(admin)
            db.commit()
    finally:
        db.close()

    await message.answer("–ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!")
    await state.clear()

async def inline_router(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    if data == "new_bot":
        await cmd_new_bot(callback.message, state)
    elif data == "create_chat":
        await cmd_create_chat(callback.message, state)
    elif data == "invite":
        await cmd_invite(callback.message, state)
    elif data == "cancel":
        await cmd_cancel(callback.message, state)
    elif data == "auth":
        await cmd_auth(callback.message, state)
    await callback.answer()  # —â–æ–± –∑–Ω–∏–∫ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä ¬´‚Ä¶¬ª

async def cmd_start(message: Message, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –ù–æ–≤–∏–π –±–æ—Ç", callback_data="new_bot")],
        [InlineKeyboardButton(text="üí¨ –°—Ç–≤–æ—Ä–∏—Ç–∏ —á–∞—Ç", callback_data="create_chat")],
        [InlineKeyboardButton(text="üîó –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è", callback_data="invite")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")],
        [InlineKeyboardButton(text="üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è", callback_data="auth")]
    ])
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=kb
    )

async def cmd_new_bot(message: Message, state: FSMContext):
    if not await check_admin_permissions(message):
        return
    await state.set_state(NewBotStates.waiting_token)
    await message.answer(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ—Ç—Ä–∏–º–∞–Ω–∏–π –≤—ñ–¥ @BotFather).\n"
        "–§–æ—Ä–º–∞—Ç: 123456:ABC-DEF..."
    )

async def handle_token(message: Message, state: FSMContext):
    token = message.text.strip()
    await message.answer("–ü–µ—Ä–µ–≤—ñ—Ä—è—é —Ç–æ–∫–µ–Ω...")
    info = await validate_telegram_token(token)
    if not info:
        await message.answer("–¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î Telegram API. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–æ–∫–µ–Ω.")
        return
    await state.update_data(token=token, username=info['username'])
    await state.set_state(NewBotStates.waiting_mode)
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: 'single' (–æ–¥–∏–Ω –±–æ—Ç –¥–ª—è –±–∞–≥–∞—Ç—å–æ—Ö —á–∞—Ç—ñ–≤) –∞–±–æ 'multi' (–æ–∫—Ä–µ–º–∏–π –±–æ—Ç –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —á–∞—Ç—É).")

async def handle_mode(message: Message, state: FSMContext):
    mode = message.text.strip().lower()
    if mode not in ["single", "multi"]:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ä–µ–∂–∏–º. –í–∏–±–µ—Ä—ñ—Ç—å 'single' –∞–±–æ 'multi'.")
        return
    data = await state.get_data()
    token = data["token"]
    try:
        result = await register_token_to_backend(
            settings.BACKEND_URL,
            token,
            mode=mode,
            owner_tg_id=message.from_user.id
        )
        # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É "–∑–∞–ø—É—Å—Ç–∏—Ç–∏" –±–æ—Ç–∞ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{str(settings.BACKEND_URL).rstrip('/')}/admin/start_bot",
                json={"bot_id": result['id'], "owner_tg_id": message.from_user.id}
            ) as resp:
                if resp.status >= 400:
                    j = await resp.json()
                    await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {j.get('detail', 'Unknown error')}")
                    return
                start_result = await resp.json()
        await message.answer(f"–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ: {result['username']} (id={result['tg_bot_id']}), —Ä–µ–∂–∏–º: {result['mode']}\n–°—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫—É: {start_result.get('status')}")
    except Exception as e:
        logging.error(f"Error in registration or start: {e}")
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∞–±–æ –∑–∞–ø—É—Å–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    await state.clear()

async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

async def cmd_create_chat(message: Message, state: FSMContext):
    if not await check_admin_permissions(message):
        return
    await state.set_state(NewBotStates.waiting_chat_details)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å ID –±–æ—Ç–∞ —Ç–∞ –Ω–∞–∑–≤—É —á–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç: &lt;bot_id&gt; &lt;title&gt;)"
    )


async def handle_chat_details(message: Message, state: FSMContext):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å: <bot_id> <title>")
        return
    bot_id, title = parts
    try:
        bot_id = int(bot_id)
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{str(settings.BACKEND_URL).rstrip('/')}/admin/create_chat",
                json={"bot_id": bot_id, "title": title}
            ) as resp:
                if resp.status >= 400:
                    j = await resp.json()
                    await message.answer(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∞—Ç—É: {j.get('detail', 'Unknown error')}")
                    return
                result = await resp.json()
        await message.answer(f"–ß–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {result['title']} (id={result['id']})")
    except Exception as e:
        logging.error(f"Error creating chat: {e}")
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —á–∞—Ç—É.")
    await state.clear()

async def cmd_invite(message: Message, state: FSMContext):
    if not await check_admin_permissions(message):
        return
    await state.set_state(NewBotStates.waiting_invite_details)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å ID —á–∞—Ç—É, –ø—Å–µ–≤–¥–æ–Ω—ñ–º —Ç–∞ —Ç–µ–≥ (—Ñ–æ—Ä–º–∞—Ç: &lt;room_id&gt; &lt;pseudonym&gt; [tag])"
    )




async def handle_invite_details(message: Message, state: FSMContext):
    parts = message.text.strip().split(maxsplit=2)
    if len(parts) < 2:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å: <room_id> <pseudonym> [tag]")
        return
    room_id, pseudonym = parts[:2]
    tag = parts[2] if len(parts) > 2 else None
    try:
        room_id = int(room_id)
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{str(settings.BACKEND_URL).rstrip('/')}/admin/generate_invite",
                json={"room_id": room_id, "pseudonym": pseudonym, "tag": tag}
            ) as resp:
                if resp.status >= 400:
                    j = await resp.json()
                    await message.answer(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {j.get('detail', 'Unknown error')}")
                    return
                result = await resp.json()

        # --- –û–¢–†–ò–ú–£–Ñ–ú–û USERNAME –ë–û–¢–ê –ß–ï–†–ï–ó –ë–î ---
        db = SessionLocal()
        try:
            room = db.query(ChatRoom).filter_by(id=room_id).first()
            bot  = db.query(Bot).filter_by(id=room.bot_id).first()
            username = bot.username       # <-- —Å–ø—Ä–∞–≤–∂–Ω—ñ–π username –±–æ—Ç–∞
        finally:
            db.close()

        link = f"https://t.me/{username}?start={result['code']}"
        await message.answer(
            f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: {link}\n"
            f"–ü—Å–µ–≤–¥–æ–Ω—ñ–º: {result['pseudonym']}\n"
            f"–¢–µ–≥: {result['tag']}"
        )
    except Exception as e:
        logging.error(f"Error generating invite: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.")
    await state.clear()


async def check_admin_permissions(message: Message):
    # from app.database import SessionLocal
    # from app.models import AdminUser
    #
    # db = SessionLocal()
    # try:
    #     admin = db.query(AdminUser).filter_by(tg_user_id=message.from_user.id).first()
    #     if not admin:
    #         await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
    #         return False
    # finally:
    #     db.close()
    return True
